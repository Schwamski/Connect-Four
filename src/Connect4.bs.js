// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Setup$Game = require("./Setup.bs.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function currentPlayer(inState) {
  var p = inState._0;
  if (typeof p === "number") {
    return Pervasives.failwith("currentPlayer domain error");
  } else {
    return p._0;
  }
}

function otherPlayer(player) {
  if (player) {
    return /* P1 */0;
  } else {
    return /* P2 */1;
  }
}

function initialStateHelper(a, n) {
  if (n <= 0) {
    return /* [] */0;
  } else {
    return {
            hd: a,
            tl: initialStateHelper(a, n - 1 | 0)
          };
  }
}

function initialState(s) {
  var boardDims = Setup$Game.parseBoardDims(s);
  var boardHeight = Setup$Game.getBoardHeight(boardDims);
  var boardWidth = Setup$Game.getBoardWidth(boardDims);
  return /* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: initialStateHelper(initialStateHelper(0, boardHeight), boardWidth)
        };
}

function gameStatus(inState) {
  return inState._0;
}

function transpose(currentBoard) {
  if (!currentBoard) {
    return Pervasives.failwith("the board cannot be zero-dimensional");
  }
  var match = currentBoard.hd;
  if (match) {
    if (match.tl) {
      return {
              hd: List.map(List.hd, currentBoard),
              tl: transpose(List.map(List.tl, currentBoard))
            };
    } else {
      return {
              hd: List.flatten(currentBoard),
              tl: /* [] */0
            };
    }
  } else {
    return Pervasives.failwith("the board cannot be zero-dimensional");
  }
}

function checkVerticalHelper(_column) {
  while(true) {
    var column = _column;
    if (!column) {
      return false;
    }
    var match = column.tl;
    if (!match) {
      return false;
    }
    var match$1 = match.tl;
    if (!match$1) {
      return false;
    }
    var match$2 = match$1.tl;
    if (!match$2) {
      return false;
    }
    var d = match$2.hd;
    var c = match$1.hd;
    var b = match.hd;
    if (column.hd === b && b === c && c === d && d !== 0) {
      return true;
    }
    _column = {
      hd: b,
      tl: {
        hd: c,
        tl: {
          hd: d,
          tl: match$2.tl
        }
      }
    };
    continue ;
  };
}

function diagonalizeHelper(currentBoard) {
  if (currentBoard) {
    return {
            hd: getDiagonal(currentBoard),
            tl: diagonalizeHelper(currentBoard.tl)
          };
  } else {
    return /* [] */0;
  }
}

function getDiagonal(currentBoard) {
  if (!currentBoard) {
    return /* [] */0;
  }
  var match = currentBoard.hd;
  if (match) {
    return {
            hd: match.hd,
            tl: getDiagonal(List.map(List.tl, currentBoard.tl))
          };
  } else {
    return /* [] */0;
  }
}

function checkVertical(currentBoard) {
  return List.mem(true, List.map(checkVerticalHelper, currentBoard));
}

function diagonalize(currentBoard) {
  return Pervasives.$at(List.rev(List.tl(diagonalizeHelper(transpose(currentBoard)))), diagonalizeHelper(currentBoard));
}

function checkWinner(currentBoard) {
  if (checkVertical(currentBoard) || checkVertical(transpose(currentBoard)) || checkVertical(diagonalize(currentBoard))) {
    return true;
  } else {
    return checkVertical(diagonalize(List.rev(currentBoard)));
  }
}

function boardSpaceQ(_updatedBoard) {
  while(true) {
    var updatedBoard = _updatedBoard;
    if (!updatedBoard) {
      return false;
    }
    var match = updatedBoard.hd;
    if (!match) {
      return Pervasives.failwith("boardSpaceQ domain error");
    }
    if (match.hd === 0) {
      return true;
    }
    _updatedBoard = updatedBoard.tl;
    continue ;
  };
}

function chipDropHelper(player, column) {
  if (!column) {
    return Pervasives.failwith("column of 0 height");
  }
  if (column.hd !== 0) {
    return Pervasives.failwith("illegal move: column filled");
  }
  var match = column.tl;
  if (!match) {
    return {
            hd: player,
            tl: /* [] */0
          };
  }
  var a = match.hd;
  if (a !== 0) {
    return {
            hd: player,
            tl: {
              hd: a,
              tl: match.tl
            }
          };
  } else {
    return {
            hd: 0,
            tl: chipDropHelper(player, {
                  hd: 0,
                  tl: match.tl
                })
          };
  }
}

function chipDrop(player, column, board) {
  if (!board) {
    return Pervasives.failwith("No Columns Available");
  }
  var tl = board.tl;
  var hd = board.hd;
  if (column <= 1) {
    return {
            hd: chipDropHelper(player, hd),
            tl: tl
          };
  } else {
    return {
            hd: hd,
            tl: chipDrop(player, column - 1 | 0, tl)
          };
  }
}

function playerToChip(player) {
  if (player) {
    return 2;
  } else {
    return 1;
  }
}

function nextState(inState, inMove) {
  var player = inState._0;
  if (typeof player === "number") {
    return inState;
  }
  if (player.TAG === /* Win */0) {
    return inState;
  }
  var player$1 = player._0;
  var updatedBoard = chipDrop(player$1 ? 2 : 1, inMove._0, inState._1);
  if (checkWinner(updatedBoard)) {
    return /* State */{
            _0: {
              TAG: /* Win */0,
              _0: player$1
            },
            _1: updatedBoard
          };
  } else if (boardSpaceQ(updatedBoard)) {
    return /* State */{
            _0: {
              TAG: /* Ongoing */1,
              _0: player$1 ? /* P1 */0 : /* P2 */1
            },
            _1: updatedBoard
          };
  } else {
    return /* State */{
            _0: /* Draw */0,
            _1: updatedBoard
          };
  }
}

function legalMovesHelper(_legalCols, _col) {
  while(true) {
    var col = _col;
    var legalCols = _legalCols;
    if (!legalCols) {
      return /* [] */0;
    }
    if (legalCols.hd) {
      return {
              hd: /* Column */{
                _0: col
              },
              tl: legalMovesHelper(legalCols.tl, col + 1 | 0)
            };
    }
    _col = col + 1 | 0;
    _legalCols = legalCols.tl;
    continue ;
  };
}

function legalColumns(currentBoard) {
  return List.map((function (x) {
                return List.hd(x) === 0;
              }), currentBoard);
}

function legalMoves(inState) {
  return legalMovesHelper(legalColumns(inState._1), 1);
}

function orientationCounter(player, proc, currentBoard) {
  if (currentBoard) {
    return Curry._2(proc, player, currentBoard.hd) + orientationCounter(player, proc, currentBoard.tl) | 0;
  } else {
    return 0;
  }
}

function checkThrees(p, _column) {
  while(true) {
    var column = _column;
    if (!column) {
      return 0;
    }
    var a = column.hd;
    var match = column.tl;
    if (!match) {
      return 0;
    }
    var b = match.hd;
    if (b !== 0) {
      var match$1 = match.tl;
      if (!match$1) {
        return 0;
      }
      if (match$1.hd === 0) {
        var match$2 = match$1.tl;
        if (!match$2) {
          return 0;
        }
        if (!match$2.tl) {
          var c = match$2.hd;
          if (a === b && b === c && c === p) {
            return 1;
          } else {
            return 0;
          }
        }
        
      }
      
    } else {
      var match$3 = match.tl;
      if (!match$3) {
        return 0;
      }
      var match$4 = match$3.tl;
      if (!match$4) {
        return 0;
      }
      if (!match$4.tl) {
        var c$1 = match$4.hd;
        var b$1 = match$3.hd;
        if (a === b$1 && b$1 === c$1 && c$1 === p) {
          return 1;
        } else {
          return 0;
        }
      }
      
    }
    if (b !== 0) {
      var match$5 = match.tl;
      if (match$5.hd !== 0) {
        if (a !== 0) {
          var match$6 = column.tl;
          var match$7 = match$6.tl;
          var match$8 = match$7.tl;
          if (!match$8) {
            return 0;
          }
          var d = match$8.hd;
          var c$2 = match$7.hd;
          var b$2 = match$6.hd;
          if (d !== 0) {
            _column = {
              hd: b$2,
              tl: {
                hd: c$2,
                tl: {
                  hd: d,
                  tl: match$8.tl
                }
              }
            };
            continue ;
          }
          var tl = match$8.tl;
          if (a === b$2 && b$2 === c$2 && c$2 === p) {
            return 1 + checkThrees(p, tl) | 0;
          }
          _column = {
            hd: b$2,
            tl: {
              hd: c$2,
              tl: {
                hd: 0,
                tl: tl
              }
            }
          };
          continue ;
        }
        var match$9 = column.tl;
        var match$10 = match$9.tl;
        var match$11 = match$10.tl;
        if (!match$11) {
          return 0;
        }
        var tl$1 = match$11.tl;
        var c$3 = match$11.hd;
        var b$3 = match$10.hd;
        var a$1 = match$9.hd;
        if (a$1 === b$3 && b$3 === c$3 && c$3 === p) {
          return 1 + checkThrees(p, tl$1) | 0;
        }
        _column = {
          hd: a$1,
          tl: {
            hd: b$3,
            tl: {
              hd: c$3,
              tl: tl$1
            }
          }
        };
        continue ;
      }
      var match$12 = match$5.tl;
      if (!match$12) {
        return 0;
      }
      var tl$2 = match$12.tl;
      var c$4 = match$12.hd;
      if (a === b && b === c$4 && c$4 === p) {
        return 1 + checkThrees(p, tl$2) | 0;
      }
      _column = {
        hd: b,
        tl: {
          hd: 0,
          tl: {
            hd: c$4,
            tl: tl$2
          }
        }
      };
      continue ;
    }
    var match$13 = match.tl;
    var match$14 = match$13.tl;
    if (!match$14) {
      return 0;
    }
    var tl$3 = match$14.tl;
    var c$5 = match$14.hd;
    var b$4 = match$13.hd;
    if (a === b$4 && b$4 === c$5 && c$5 === p) {
      return 1 + checkThrees(p, tl$3) | 0;
    }
    _column = {
      hd: 0,
      tl: {
        hd: b$4,
        tl: {
          hd: c$5,
          tl: tl$3
        }
      }
    };
    continue ;
  };
}

function checkTwos(p, _column) {
  while(true) {
    var column = _column;
    if (!column) {
      return 0;
    }
    var a = column.hd;
    var exit = 0;
    var exit$1 = 0;
    var exit$2 = 0;
    if (a !== 0) {
      exit$2 = 3;
    } else {
      var match = column.tl;
      if (!match) {
        return 0;
      }
      var a$1 = match.hd;
      if (a$1 !== 0) {
        var match$1 = match.tl;
        if (!match$1) {
          return 0;
        }
        var match$2 = match$1.tl;
        if (!match$2) {
          return 0;
        }
        if (match$2.hd !== 0) {
          exit$2 = 3;
        } else {
          var tl = match$2.tl;
          var b = match$1.hd;
          if (a$1 === b && b === p) {
            return 1 + checkTwos(p, tl) | 0;
          }
          _column = {
            hd: a$1,
            tl: {
              hd: b,
              tl: {
                hd: 0,
                tl: tl
              }
            }
          };
          continue ;
        }
      } else {
        var match$3 = match.tl;
        if (!match$3) {
          return 0;
        }
        var match$4 = match$3.tl;
        if (!match$4) {
          return 0;
        }
        var match$5 = match$4.tl;
        var b$1 = match$4.hd;
        var a$2 = match$3.hd;
        if (!match$5) {
          if (a$2 === b$1 && b$1 === p) {
            return 1;
          } else {
            return 0;
          }
        }
        var tl$1 = match$5.tl;
        var c = match$5.hd;
        if (a$2 === b$1 && b$1 === p && c !== p) {
          return 1 + checkTwos(p, {
                      hd: c,
                      tl: tl$1
                    }) | 0;
        }
        _column = {
          hd: 0,
          tl: {
            hd: a$2,
            tl: {
              hd: b$1,
              tl: {
                hd: c,
                tl: tl$1
              }
            }
          }
        };
        continue ;
      }
    }
    if (exit$2 === 3) {
      var match$6 = column.tl;
      if (!match$6) {
        return 0;
      }
      var match$7 = match$6.tl;
      if (!match$7) {
        return 0;
      }
      if (match$7.hd !== 0) {
        exit$1 = 2;
      } else {
        var match$8 = match$7.tl;
        if (!match$8) {
          return 0;
        }
        if (match$8.hd !== 0) {
          exit$1 = 2;
        } else {
          var tl$2 = match$8.tl;
          var b$2 = match$6.hd;
          if (a === b$2 && b$2 === p) {
            return 1 + checkTwos(p, tl$2) | 0;
          }
          _column = {
            hd: b$2,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: tl$2
              }
            }
          };
          continue ;
        }
      }
    }
    if (exit$1 === 2) {
      if (a !== 0) {
        exit = 1;
      } else {
        var match$9 = column.tl;
        var match$10 = match$9.tl;
        if (match$10.hd !== 0) {
          exit = 1;
        } else {
          var match$11 = match$10.tl;
          if (!match$11) {
            return 0;
          }
          var match$12 = match$11.tl;
          var b$3 = match$11.hd;
          var a$3 = match$9.hd;
          if (!match$12) {
            if (a$3 === b$3 && b$3 === p) {
              return 1;
            } else {
              return 0;
            }
          }
          var tl$3 = match$12.tl;
          var c$1 = match$12.hd;
          if (a$3 === b$3 && b$3 === p && c$1 !== p) {
            return 1 + checkTwos(p, {
                        hd: c$1,
                        tl: tl$3
                      }) | 0;
          }
          _column = {
            hd: a$3,
            tl: {
              hd: 0,
              tl: {
                hd: b$3,
                tl: {
                  hd: c$1,
                  tl: tl$3
                }
              }
            }
          };
          continue ;
        }
      }
    }
    if (exit === 1) {
      var match$13 = column.tl;
      var b$4 = match$13.hd;
      var exit$3 = 0;
      if (b$4 !== 0) {
        exit$3 = 2;
      } else {
        var match$14 = match$13.tl;
        var b$5 = match$14.hd;
        if (b$5 !== 0) {
          var match$15 = match$14.tl;
          if (!match$15) {
            return 0;
          }
          if (match$15.hd !== 0) {
            exit$3 = 2;
          } else {
            var tl$4 = match$15.tl;
            if (a === b$5 && b$5 === p) {
              return 1 + checkTwos(p, tl$4) | 0;
            }
            _column = {
              hd: 0,
              tl: {
                hd: b$5,
                tl: {
                  hd: 0,
                  tl: tl$4
                }
              }
            };
            continue ;
          }
        } else {
          var match$16 = match$14.tl;
          if (!match$16) {
            return 0;
          }
          var match$17 = match$16.tl;
          var b$6 = match$16.hd;
          if (!match$17) {
            if (a === b$6 && b$6 === p) {
              return 1;
            } else {
              return 0;
            }
          }
          var tl$5 = match$17.tl;
          var c$2 = match$17.hd;
          if (a === b$6 && b$6 === p && c$2 !== p) {
            return 1 + checkTwos(p, {
                        hd: c$2,
                        tl: tl$5
                      }) | 0;
          }
          _column = {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: b$6,
                tl: {
                  hd: c$2,
                  tl: tl$5
                }
              }
            }
          };
          continue ;
        }
      }
      if (exit$3 === 2) {
        var match$18 = match$13.tl;
        var match$19 = match$18.tl;
        if (!match$19) {
          return 0;
        }
        _column = {
          hd: b$4,
          tl: {
            hd: match$18.hd,
            tl: {
              hd: match$19.hd,
              tl: match$19.tl
            }
          }
        };
        continue ;
      }
      
    }
    
  };
}

function completeCounter(player, proc, currentBoard) {
  return ((orientationCounter(player, proc, currentBoard) + orientationCounter(player, proc, transpose(currentBoard)) | 0) + orientationCounter(player, proc, diagonalize(currentBoard)) | 0) + orientationCounter(player, proc, diagonalize(List.rev(currentBoard))) | 0;
}

function listControlBoard(player, legalMoves, currentBoard) {
  if (legalMoves) {
    return {
            hd: controlledColumnBoard(player, legalMoves.hd._0, currentBoard),
            tl: listControlBoard(player, legalMoves.tl, currentBoard)
          };
  } else {
    return /* [] */0;
  }
}

function columnControlDrop(player, column) {
  if (!column) {
    return /* [] */0;
  }
  var hd = column.hd;
  if (hd === 0) {
    var match = column.tl;
    if (match && match.hd === 0) {
      var match$1 = match.tl;
      if (!match$1) {
        return {
                hd: player,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              };
      }
      var tl = match$1.tl;
      var a = match$1.hd;
      if (a !== 0) {
        return {
                hd: player,
                tl: {
                  hd: 0,
                  tl: {
                    hd: a,
                    tl: tl
                  }
                }
              };
      } else {
        return {
                hd: 0,
                tl: columnControlDrop(player, {
                      hd: 0,
                      tl: {
                        hd: a,
                        tl: tl
                      }
                    })
              };
      }
    }
    
  }
  var tl$1 = column.tl;
  if (tl$1 && !tl$1.tl) {
    return {
            hd: hd,
            tl: {
              hd: tl$1.hd,
              tl: /* [] */0
            }
          };
  } else {
    return {
            hd: hd,
            tl: tl$1
          };
  }
}

function controlledColumnBoard(player, column, board) {
  if (!board) {
    return Pervasives.failwith("No Columns Available");
  }
  var tl = board.tl;
  var hd = board.hd;
  if (column <= 1) {
    return {
            hd: columnControlDrop(player, hd),
            tl: tl
          };
  } else {
    return {
            hd: hd,
            tl: controlledColumnBoard(player, column - 1 | 0, tl)
          };
  }
}

function countTrue(_alob) {
  while(true) {
    var alob = _alob;
    if (!alob) {
      return 0;
    }
    if (alob.hd) {
      return 1 + countTrue(alob.tl) | 0;
    }
    _alob = alob.tl;
    continue ;
  };
}

function wonControlBoard(player, legalMoves, currentBoard) {
  return List.map(checkWinner, listControlBoard(player, legalMoves, currentBoard));
}

function controlCounter(player, inState) {
  return countTrue(wonControlBoard(player, legalMoves(inState), inState._1));
}

function estimateValue(inState) {
  var _player = inState._0;
  if (typeof _player === "number") {
    return 0;
  }
  if (_player.TAG === /* Win */0) {
    if (_player._0) {
      return -100000;
    } else {
      return 100000;
    }
  }
  var currentBoard = inState._1;
  return (((((completeCounter(1, checkTwos, currentBoard) << 1) - (completeCounter(2, checkTwos, currentBoard) << 1) | 0) + Math.imul(7, completeCounter(1, checkThrees, currentBoard)) | 0) - Math.imul(7, completeCounter(2, checkThrees, currentBoard)) | 0) + Math.imul(12, controlCounter(1, inState)) | 0) - Math.imul(12, controlCounter(2, inState)) | 0;
}

function stringOfPlayer(p) {
  if (p) {
    return "P2";
  } else {
    return "P1";
  }
}

function colorizeToken(token) {
  switch (token) {
    case 0 :
        return "0";
    case 1 :
        return "\x1b[32m1\x1b[0m";
    case 2 :
        return "\x1b[31m2\x1b[0m";
    default:
      return Pervasives.failwith("invalid token");
  }
}

function rowToString(row) {
  return $$String.concat(" | ", List.map(colorizeToken, row));
}

function stringOfState(inState) {
  var tmp = inState._0;
  if (typeof tmp === "number") {
    return $$String.concat("\n", List.map(rowToString, transpose(inState._1))) + "\n\nNo legal moves remain";
  } else if (tmp.TAG === /* Win */0) {
    return $$String.concat("\n", List.map(rowToString, transpose(inState._1))) + "\n";
  } else {
    return $$String.concat("\n", List.map(rowToString, transpose(inState._1))) + ("\n\nCurrent Game Value: " + (String(estimateValue(inState) | 0) + "\n"));
  }
}

function stringOfMove(inMove) {
  return "places a chip in column #" + (String(inMove._0) + ": \n");
}

function moveOfString(col, inState) {
  var currentBoard = inState._1;
  var a = Pervasives.int_of_string_opt(col);
  if (a !== undefined) {
    if (List.mem(/* Column */{
            _0: a
          }, legalMoves(inState))) {
      return /* Column */{
              _0: Caml_format.caml_int_of_string(col)
            };
    } else {
      return Pervasives.failwith("\n" + ($$String.concat("\n", List.map(rowToString, transpose(currentBoard))) + "\n\nIllegal move - please choose a column with vacant spaces\n"));
    }
  } else {
    return Pervasives.failwith("\n" + ($$String.concat("\n", List.map(rowToString, transpose(currentBoard))) + "\n\nIllegal move - your input must be an integer\n"));
  }
}

var Connect4 = {
  currentPlayer: currentPlayer,
  otherPlayer: otherPlayer,
  initialStateHelper: initialStateHelper,
  initialState: initialState,
  gameStatus: gameStatus,
  checkWinner: checkWinner,
  checkVertical: checkVertical,
  checkVerticalHelper: checkVerticalHelper,
  transpose: transpose,
  diagonalize: diagonalize,
  diagonalizeHelper: diagonalizeHelper,
  getDiagonal: getDiagonal,
  nextState: nextState,
  chipDrop: chipDrop,
  chipDropHelper: chipDropHelper,
  playerToChip: playerToChip,
  boardSpaceQ: boardSpaceQ,
  legalMoves: legalMoves,
  legalMovesHelper: legalMovesHelper,
  legalColumns: legalColumns,
  completeCounter: completeCounter,
  checkTwos: checkTwos,
  checkThrees: checkThrees,
  orientationCounter: orientationCounter,
  controlCounter: controlCounter,
  columnControlDrop: columnControlDrop,
  controlledColumnBoard: controlledColumnBoard,
  listControlBoard: listControlBoard,
  wonControlBoard: wonControlBoard,
  countTrue: countTrue,
  estimateValue: estimateValue,
  stringOfPlayer: stringOfPlayer,
  colorizeToken: colorizeToken,
  rowToString: rowToString,
  stringOfState: stringOfState,
  stringOfMove: stringOfMove,
  moveOfString: moveOfString
};

Setup$Game.checkExpect(currentPlayer(/* State */{
          _0: {
            TAG: /* Win */0,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: 1,
              tl: /* [] */0
            },
            tl: /* [] */0
          }
        }), /* P1 */0, "currentPlayer: 1");

Setup$Game.checkExpect(currentPlayer(/* State */{
          _0: {
            TAG: /* Win */0,
            _0: /* P2 */1
          },
          _1: {
            hd: {
              hd: 0,
              tl: /* [] */0
            },
            tl: /* [] */0
          }
        }), /* P2 */1, "currentPlayer: 2");

Setup$Game.checkError((function (param) {
        return currentPlayer(/* State */{
                    _0: /* Draw */0,
                    _1: {
                      hd: {
                        hd: 0,
                        tl: /* [] */0
                      },
                      tl: /* [] */0
                    }
                  });
      }), "currentPlayer domain error");

Setup$Game.checkExpect(/* P2 */1, /* P2 */1, "otherPlayer: 1");

Setup$Game.checkExpect(/* P1 */0, /* P1 */0, "otherPlayer: 2");

Setup$Game.checkExpect(initialStateHelper(5, 0), /* [] */0, "initialStateHelper: 1");

Setup$Game.checkExpect(initialStateHelper(/* [] */0, 3), {
      hd: /* [] */0,
      tl: {
        hd: /* [] */0,
        tl: {
          hd: /* [] */0,
          tl: /* [] */0
        }
      }
    }, "initialStateHelper: 2");

Setup$Game.checkExpect(initialState("1 1"), /* State */{
      _0: {
        TAG: /* Ongoing */1,
        _0: /* P1 */0
      },
      _1: {
        hd: {
          hd: 0,
          tl: /* [] */0
        },
        tl: /* [] */0
      }
    }, "initialState: 1");

Setup$Game.checkExpect(initialState("2 3"), /* State */{
      _0: {
        TAG: /* Ongoing */1,
        _0: /* P1 */0
      },
      _1: {
        hd: {
          hd: 0,
          tl: {
            hd: 0,
            tl: /* [] */0
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: /* [] */0
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            },
            tl: /* [] */0
          }
        }
      }
    }, "initialState: 2");

Setup$Game.checkExpect({
      TAG: /* Ongoing */1,
      _0: /* P1 */0
    }, {
      TAG: /* Ongoing */1,
      _0: /* P1 */0
    }, "gameStatus: 1");

Setup$Game.checkExpect(checkWinner({
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: {
                            hd: 1,
                            tl: /* [] */0
                          }
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), false, "checkWinner: 1");

Setup$Game.checkExpect(checkWinner({
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: {
                            hd: 1,
                            tl: /* [] */0
                          }
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), true, "checkWinner: 2");

Setup$Game.checkExpect(checkVertical({
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: {
                            hd: 1,
                            tl: /* [] */0
                          }
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), false, "checkVertical: 1");

Setup$Game.checkExpect(checkVertical({
          hd: {
            hd: 0,
            tl: {
              hd: 2,
              tl: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: {
                            hd: 1,
                            tl: /* [] */0
                          }
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), true, "checkVertical: 2");

Setup$Game.checkExpect(checkVerticalHelper({
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 2,
              tl: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            }
          }
        }), false, "checkVerticalHelper: 1");

Setup$Game.checkExpect(checkVerticalHelper({
          hd: 0,
          tl: {
            hd: 2,
            tl: {
              hd: 2,
              tl: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            }
          }
        }), true, "checkVerticalHelper: 2");

Setup$Game.checkExpect(transpose({
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: 0,
        tl: {
          hd: 0,
          tl: {
            hd: 0,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: 0,
          tl: {
            hd: 1,
            tl: {
              hd: 2,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: 2,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "transpose: 1");

Setup$Game.checkError((function (param) {
        return transpose({
                    hd: /* [] */0,
                    tl: /* [] */0
                  });
      }), "the board cannot be zero-dimensional");

Setup$Game.checkExpect(diagonalize({
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: 2,
        tl: /* [] */0
      },
      tl: {
        hd: {
          hd: 0,
          tl: {
            hd: 0,
            tl: /* [] */0
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: {
              hd: 1,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: /* [] */0
              },
              tl: /* [] */0
            }
          }
        }
      }
    }, "diagonalize: 1");

Setup$Game.checkExpect(diagonalizeHelper({
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: 0,
        tl: {
          hd: 1,
          tl: {
            hd: 0,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: 0,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: /* [] */0
          },
          tl: /* [] */0
        }
      }
    }, "diagonalizeHelper: 1");

Setup$Game.checkExpect(getDiagonal({
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 0,
                    tl: /* [] */0
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: 0,
      tl: {
        hd: 1,
        tl: {
          hd: 0,
          tl: /* [] */0
        }
      }
    }, "getDiagonal: 1");

Setup$Game.checkExpect(nextState(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              },
              tl: /* [] */0
            }
          }
        }, /* Column */{
          _0: 1
        }), /* State */{
      _0: {
        TAG: /* Ongoing */1,
        _0: /* P2 */1
      },
      _1: {
        hd: {
          hd: 0,
          tl: {
            hd: 1,
            tl: /* [] */0
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: /* [] */0
            }
          },
          tl: /* [] */0
        }
      }
    }, "nextState: 1");

Setup$Game.checkExpect(nextState(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: 0,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }, /* Column */{
          _0: 2
        }), /* State */{
      _0: {
        TAG: /* Ongoing */1,
        _0: /* P2 */1
      },
      _1: {
        hd: {
          hd: 0,
          tl: {
            hd: 1,
            tl: {
              hd: 2,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: 1,
            tl: {
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "nextState: 2");

Setup$Game.checkExpect(nextState(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P2 */1
          },
          _1: {
            hd: {
              hd: 0,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              },
              tl: {
                hd: {
                  hd: 0,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }, /* Column */{
          _0: 3
        }), /* State */{
      _0: {
        TAG: /* Ongoing */1,
        _0: /* P1 */0
      },
      _1: {
        hd: {
          hd: 0,
          tl: {
            hd: 1,
            tl: {
              hd: 2,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: 2,
              tl: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: /* [] */0
                }
              }
            },
            tl: /* [] */0
          }
        }
      }
    }, "nextState: 3");

Setup$Game.checkExpect(chipDrop(1, 1, {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: /* [] */0
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            },
            tl: /* [] */0
          }
        }), {
      hd: {
        hd: 0,
        tl: {
          hd: 1,
          tl: /* [] */0
        }
      },
      tl: {
        hd: {
          hd: 0,
          tl: {
            hd: 0,
            tl: /* [] */0
          }
        },
        tl: /* [] */0
      }
    }, "chipDrop: 1");

Setup$Game.checkExpect(chipDrop(1, 2, {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: /* [] */0
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: 0,
        tl: {
          hd: 0,
          tl: /* [] */0
        }
      },
      tl: {
        hd: {
          hd: 0,
          tl: {
            hd: 1,
            tl: /* [] */0
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: /* [] */0
            }
          },
          tl: /* [] */0
        }
      }
    }, "chipDrop: 2");

Setup$Game.checkExpect(chipDrop(1, 3, {
          hd: {
            hd: 0,
            tl: {
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: 0,
        tl: {
          hd: 1,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: 0,
          tl: {
            hd: 2,
            tl: {
              hd: 2,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: /* [] */0
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "chipDrop: 3");

Setup$Game.checkExpect(chipDrop(1, 3, {
          hd: {
            hd: 0,
            tl: {
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: 0,
        tl: {
          hd: 1,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: 0,
          tl: {
            hd: 2,
            tl: {
              hd: 2,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 1,
                tl: /* [] */0
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "chipDrop: 4");

Setup$Game.checkError((function (param) {
        return chipDrop(1, 2, {
                    hd: /* [] */0,
                    tl: {
                      hd: /* [] */0,
                      tl: /* [] */0
                    }
                  });
      }), "column of 0 height");

Setup$Game.checkExpect(chipDropHelper(1, {
          hd: 0,
          tl: /* [] */0
        }), {
      hd: 1,
      tl: /* [] */0
    }, "chipDropHelper: 1");

Setup$Game.checkExpect(chipDropHelper(1, {
          hd: 0,
          tl: {
            hd: 1,
            tl: /* [] */0
          }
        }), {
      hd: 1,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, "chipDropHelper: 2");

Setup$Game.checkError((function (param) {
        return chipDropHelper(1, {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  });
      }), "illegal move: column filled");

Setup$Game.checkExpect(1, 1, "playerToChip: 1");

Setup$Game.checkExpect(boardSpaceQ({
          hd: {
            hd: 1,
            tl: {
              hd: 2,
              tl: /* [] */0
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: /* [] */0
              }
            },
            tl: /* [] */0
          }
        }), false, "boardSpaceQ: 1");

Setup$Game.checkExpect(boardSpaceQ({
          hd: {
            hd: 0,
            tl: {
              hd: 2,
              tl: /* [] */0
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: /* [] */0
              }
            },
            tl: /* [] */0
          }
        }), true, "boardSpaceQ: 2");

Setup$Game.checkExpect(legalMoves(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: /* Column */{
        _0: 1
      },
      tl: {
        hd: /* Column */{
          _0: 2
        },
        tl: /* [] */0
      }
    }, "legalMoves: 1");

Setup$Game.checkExpect(legalMoves(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: 2,
              tl: {
                hd: 1,
                tl: /* [] */0
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }), /* [] */0, "legalMoves: 2");

Setup$Game.checkExpect(legalMoves(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P2 */1
          },
          _1: {
            hd: {
              hd: 0,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              },
              tl: {
                hd: {
                  hd: 0,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }), {
      hd: /* Column */{
        _0: 1
      },
      tl: {
        hd: /* Column */{
          _0: 3
        },
        tl: /* [] */0
      }
    }, "legalMoves: 3");

Setup$Game.checkExpect(legalMovesHelper({
          hd: true,
          tl: {
            hd: false,
            tl: {
              hd: false,
              tl: /* [] */0
            }
          }
        }, 1), {
      hd: /* Column */{
        _0: 1
      },
      tl: /* [] */0
    }, "legalMovesHelper: 1");

Setup$Game.checkExpect(legalMovesHelper({
          hd: false,
          tl: {
            hd: false,
            tl: {
              hd: false,
              tl: /* [] */0
            }
          }
        }, 1), /* [] */0, "legalMovesHelper: 2");

Setup$Game.checkExpect(legalColumns({
          hd: {
            hd: 0,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          },
          tl: {
            hd: {
              hd: 1,
              tl: {
                hd: 1,
                tl: /* [] */0
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: true,
      tl: {
        hd: false,
        tl: {
          hd: true,
          tl: /* [] */0
        }
      }
    }, "legalColumns: 1");

Setup$Game.checkExpect(completeCounter(2, checkTwos, {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: {
                            hd: 1,
                            tl: /* [] */0
                          }
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), 0, "completeCounter");

Setup$Game.checkExpect(columnControlDrop(2, {
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        }), {
      hd: 0,
      tl: {
        hd: 2,
        tl: {
          hd: 0,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }
          }
        }
      }
    }, "columnControlDrop: 1");

Setup$Game.checkExpect(columnControlDrop(1, {
          hd: 0,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }), {
      hd: 0,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, "columnControlDrop: 2");

Setup$Game.checkExpect(columnControlDrop(1, {
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            }
          }
        }), {
      hd: 1,
      tl: {
        hd: 0,
        tl: {
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 2,
              tl: /* [] */0
            }
          }
        }
      }
    }, "columnControlDrop: 3");

Setup$Game.checkExpect(controlledColumnBoard(2, 2, {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 2,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: 0,
        tl: {
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 2,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            }
          }
        }
      },
      tl: {
        hd: {
          hd: 0,
          tl: {
            hd: 2,
            tl: {
              hd: 0,
              tl: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "controlledColumnBoard: 1");

Setup$Game.checkExpect(controlledColumnBoard(1, 1, {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 2,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: 0,
        tl: {
          hd: 1,
          tl: {
            hd: 0,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            }
          }
        }
      },
      tl: {
        hd: {
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "controlledColumnBoard: 2");

Setup$Game.checkExpect(controlledColumnBoard(2, 2, {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 2,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: 0,
        tl: {
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 2,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            }
          }
        }
      },
      tl: {
        hd: {
          hd: 0,
          tl: {
            hd: 2,
            tl: {
              hd: 0,
              tl: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "controlledColumnBoard: 3");

Setup$Game.checkExpect(listControlBoard(1, {
          hd: /* Column */{
            _0: 1
          },
          tl: {
            hd: /* Column */{
              _0: 2
            },
            tl: /* [] */0
          }
        }, {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 2,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: {
          hd: 0,
          tl: {
            hd: 1,
            tl: {
              hd: 0,
              tl: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            },
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 2,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        },
        tl: /* [] */0
      }
    }, "listControlBoard: 1");

Setup$Game.checkExpect(/* [] */0, /* [] */0, "listControlBoard: 2");

Setup$Game.checkExpect(listControlBoard(1, {
          hd: /* Column */{
            _0: 1
          },
          tl: {
            hd: /* Column */{
              _0: 2
            },
            tl: /* [] */0
          }
        }, {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 2,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: {
          hd: 0,
          tl: {
            hd: 1,
            tl: {
              hd: 0,
              tl: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            },
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 1,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 2,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        },
        tl: /* [] */0
      }
    }, "listControlBoard: 3");

Setup$Game.checkExpect(estimateValue(/* State */{
          _0: {
            TAG: /* Win */0,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), 100000, "estimateValue: 1");

Setup$Game.checkExpect(estimateValue(/* State */{
          _0: /* Draw */0,
          _1: {
            hd: {
              hd: 2,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 2,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), 0, "estimateValue: 2");

Setup$Game.checkExpect(estimateValue(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), -12, "estimateValue: 3");

Setup$Game.checkExpect("0", "0", "colorizeToken: 1");

Setup$Game.checkExpect("\x1b[32m1\x1b[0m", "\x1b[32m1\x1b[0m", "colorizeToken: 1");

Setup$Game.checkExpect("\x1b[31m2\x1b[0m", "\x1b[31m2\x1b[0m", "colorizeToken: 2");

Setup$Game.checkError((function (param) {
        return Pervasives.failwith("invalid token");
      }), "invalid token");

Setup$Game.checkExpect("P1", "P1", "stringOfPlayer: 1");

Setup$Game.checkExpect("P2", "P2", "stringOfPlayer: 2");

Setup$Game.checkExpect(stringOfMove(/* Column */{
          _0: 1
        }), "places a chip in column #1: \n", "stringOfMove: 1");

Setup$Game.checkExpect(stringOfMove(/* Column */{
          _0: 2
        }), "places a chip in column #2: \n", "stringOfMove: 2");

Setup$Game.checkExpect(stringOfMove(/* Column */{
          _0: 3
        }), "places a chip in column #3: \n", "stringOfMove: 3");

Setup$Game.checkExpect(stringOfState(/* State */{
          _0: {
            TAG: /* Win */0,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), $$String.concat("\n", List.map(rowToString, transpose({
                  hd: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 2,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: {
                    hd: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 2,
                          tl: {
                            hd: 1,
                            tl: /* [] */0
                          }
                        }
                      }
                    },
                    tl: {
                      hd: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: {
                            hd: 2,
                            tl: {
                              hd: 1,
                              tl: /* [] */0
                            }
                          }
                        }
                      },
                      tl: {
                        hd: {
                          hd: 0,
                          tl: {
                            hd: 0,
                            tl: {
                              hd: 0,
                              tl: {
                                hd: 1,
                                tl: /* [] */0
                              }
                            }
                          }
                        },
                        tl: /* [] */0
                      }
                    }
                  }
                }))) + "\n", "stringOfState: 1");

Setup$Game.checkExpect(stringOfState(/* State */{
          _0: /* Draw */0,
          _1: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), $$String.concat("\n", List.map(rowToString, transpose({
                  hd: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 2,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: {
                    hd: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 2,
                          tl: {
                            hd: 1,
                            tl: /* [] */0
                          }
                        }
                      }
                    },
                    tl: {
                      hd: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: {
                            hd: 2,
                            tl: {
                              hd: 1,
                              tl: /* [] */0
                            }
                          }
                        }
                      },
                      tl: {
                        hd: {
                          hd: 0,
                          tl: {
                            hd: 0,
                            tl: {
                              hd: 0,
                              tl: {
                                hd: 1,
                                tl: /* [] */0
                              }
                            }
                          }
                        },
                        tl: /* [] */0
                      }
                    }
                  }
                }))) + "\n\nNo legal moves remain", "stringOfState: 2");

Setup$Game.checkExpect(moveOfString("3", /* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), /* Column */{
      _0: 3
    }, "moveOfString: 3");

Setup$Game.checkExpect(moveOfString("1", /* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P2 */1
          },
          _1: {
            hd: {
              hd: 0,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 2,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), /* Column */{
      _0: 1
    }, "moveOfString: 1");

Setup$Game.checkError((function (param) {
        return moveOfString("0", /* State */{
                    _0: {
                      TAG: /* Ongoing */1,
                      _0: /* P1 */0
                    },
                    _1: {
                      hd: {
                        hd: 1,
                        tl: {
                          hd: 2,
                          tl: {
                            hd: 1,
                            tl: {
                              hd: 1,
                              tl: /* [] */0
                            }
                          }
                        }
                      },
                      tl: {
                        hd: {
                          hd: 0,
                          tl: {
                            hd: 0,
                            tl: {
                              hd: 0,
                              tl: {
                                hd: 0,
                                tl: /* [] */0
                              }
                            }
                          }
                        },
                        tl: /* [] */0
                      }
                    }
                  });
      }), "\n" + ($$String.concat("\n", List.map(rowToString, transpose({
                    hd: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: {
                          hd: 1,
                          tl: {
                            hd: 1,
                            tl: /* [] */0
                          }
                        }
                      }
                    },
                    tl: {
                      hd: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: {
                            hd: 0,
                            tl: {
                              hd: 0,
                              tl: /* [] */0
                            }
                          }
                        }
                      },
                      tl: /* [] */0
                    }
                  }))) + "\n\nIllegal move - please choose a column with vacant spaces\n"));

Setup$Game.checkError((function (param) {
        return moveOfString("apple", /* State */{
                    _0: /* Draw */0,
                    _1: {
                      hd: {
                        hd: 1,
                        tl: /* [] */0
                      },
                      tl: /* [] */0
                    }
                  });
      }), "\n" + ($$String.concat("\n", List.map(rowToString, transpose({
                    hd: {
                      hd: 1,
                      tl: /* [] */0
                    },
                    tl: /* [] */0
                  }))) + "\n\nIllegal move - your input must be an integer\n"));

Setup$Game.checkError((function (param) {
        return moveOfString("0", /* State */{
                    _0: /* Draw */0,
                    _1: {
                      hd: {
                        hd: 1,
                        tl: /* [] */0
                      },
                      tl: /* [] */0
                    }
                  });
      }), "\n" + ($$String.concat("\n", List.map(rowToString, transpose({
                    hd: {
                      hd: 1,
                      tl: /* [] */0
                    },
                    tl: /* [] */0
                  }))) + "\n\nIllegal move - please choose a column with vacant spaces\n"));

var MyGame = {
  stringOfPlayer: stringOfPlayer,
  stringOfState: stringOfState,
  stringOfMove: stringOfMove,
  initialState: initialState,
  legalMoves: legalMoves,
  gameStatus: gameStatus,
  nextState: nextState,
  moveOfString: moveOfString,
  estimateValue: estimateValue
};

exports.Connect4 = Connect4;
exports.MyGame = MyGame;
/*  Not a pure module */
